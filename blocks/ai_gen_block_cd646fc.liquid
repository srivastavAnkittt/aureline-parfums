{% doc %}
  @prompt
    provide recently view product on product page

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-recently-viewed-{{ ai_gen_id }} {
    padding: {{ block.settings.section_padding }}px 0;
  }

  .ai-recently-viewed__container-{{ ai_gen_id }} {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .ai-recently-viewed__header-{{ ai_gen_id }} {
    text-align: {{ block.settings.text_alignment }};
    margin-bottom: {{ block.settings.content_spacing }}px;
  }

  .ai-recently-viewed__title-{{ ai_gen_id }} {
    color: {{ block.settings.heading_color }};
    font-size: {{ block.settings.heading_size }}px;
    margin: 0;}

  .ai-recently-viewed__grid-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: {{ block.settings.grid_gap }}px;
    margin-top: {{ block.settings.content_spacing }}px;
  }

  .ai-recently-viewed__product-{{ ai_gen_id }} {
    border: 1px solid {{ block.settings.card_border_color }};
    border-radius: {{ block.settings.card_border_radius }}px;
    padding: {{ block.settings.card_padding }}px;
    background-color: {{ block.settings.card_background }};
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    text-decoration: none;
    color: inherit;
    display: block;
  }

  .ai-recently-viewed__product-{{ ai_gen_id }}:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .ai-recently-viewed__image-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    aspect-ratio: 1;
    margin-bottom: 12px;
    overflow: hidden;
    border-radius: {{ block.settings.image_border_radius }}px;
  }

  .ai-recently-viewed__image-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-recently-viewed__product-info-{{ ai_gen_id }} {
    text-align: {{ block.settings.product_text_alignment }};
  }

  .ai-recently-viewed__product-title-{{ ai_gen_id }} {
    color: {{ block.settings.product_title_color }};
    font-size: {{ block.settings.product_title_size }}px;
    margin: 0 0 8px;font-weight: 500;
    line-height: 1.3;
  }

  .ai-recently-viewed__product-price-{{ ai_gen_id }} {
    color: {{ block.settings.product_price_color }};
    font-size: {{ block.settings.product_price_size }}px;
    font-weight: 600;
    margin: 0;
  }

  .ai-recently-viewed__empty-state-{{ ai_gen_id }} {
    text-align: center;
    padding: 40px 20px;
    color: {{ block.settings.empty_text_color }};
    font-size: 16px;
  }

  @media screen and (max-width: 768px) {
    .ai-recently-viewed__grid-{{ ai_gen_id }} {
      grid-template-columns: repeat({{ block.settings.columns_mobile }}, 1fr);
    }
  }

  @media screen and (max-width: 480px) {
    .ai-recently-viewed__container-{{ ai_gen_id }} {
      padding: 0 15px;
    }
    
    .ai-recently-viewed__product-{{ ai_gen_id }} {
      padding: 12px;
    }
  }
{% endstyle %}

<recently-viewed-products-{{ ai_gen_id }}
  class="ai-recently-viewed-{{ ai_gen_id }}"
  data-current-product="{{ product.id }}"
  data-max-products="{{ block.settings.max_products }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-recently-viewed__container-{{ ai_gen_id }}">
    <div class="ai-recently-viewed__header-{{ ai_gen_id }}">
      <h2 class="ai-recently-viewed__title-{{ ai_gen_id }}">{{ block.settings.heading }}</h2>
    </div>
    
    <div class="ai-recently-viewed__products-container-{{ ai_gen_id }}">
      <div class="ai-recently-viewed__grid-{{ ai_gen_id }}" id="ai-recently-viewed-grid-{{ ai_gen_id }}">
      </div>
      
      <div class="ai-recently-viewed__empty-state-{{ ai_gen_id }}" id="ai-recently-viewed-empty-{{ ai_gen_id }}" style="display: none;">
        {{ block.settings.empty_message }}
      </div>
    </div>
  </div>
</recently-viewed-products-{{ ai_gen_id }}><script>
  (function() {
    class RecentlyViewedProducts{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentProductId = this.dataset.currentProduct;
        this.maxProducts = parseInt(this.dataset.maxProducts) || 4;
        this.storageKey = 'recently_viewed_products';}

      connectedCallback() {
        this.saveCurrentProduct();
        this.loadRecentlyViewed();
      }

      saveCurrentProduct() {
        if (!this.currentProductId) return;

        let recentlyViewed = this.getRecentlyViewed();
        recentlyViewed = recentlyViewed.filter(id => id !== this.currentProductId);
        recentlyViewed.unshift(this.currentProductId);
        
        if (recentlyViewed.length > this.maxProducts + 5) {
          recentlyViewed = recentlyViewed.slice(0, this.maxProducts + 5);
        }

        localStorage.setItem(this.storageKey, JSON.stringify(recentlyViewed));
      }

      getRecentlyViewed() {
        try {
          const stored = localStorage.getItem(this.storageKey);
          return stored ? JSON.parse(stored) : [];
        } catch (e) {
          return [];
        }
      }

      async loadRecentlyViewed() {
        const recentlyViewed = this.getRecentlyViewed();
        const filteredProducts = recentlyViewed
          .filter(id => id !== this.currentProductId)
          .slice(0, this.maxProducts);

        if (filteredProducts.length === 0) {
          this.showEmptyState();
          return;
        }

        try {
          const products = await this.fetchProducts(filteredProducts);
          this.renderProducts(products);
        } catch (error) {
          console.error('Error loading recently viewed products:', error);
          this.showEmptyState();
        }
      }

      async fetchProducts(productIds) {
        const promises = productIds.map(async (id) => {
          try {
            const response = await fetch(`/products/${id}.js`);
            if (!response.ok) throw new Error('Product not found');
            return await response.json();
          } catch (error) {
            return null;
          }
        });

        const results = await Promise.all(promises);
        return results.filter(product => product !== null);
      }

      renderProducts(products) {
        const grid = this.querySelector('#ai-recently-viewed-grid-{{ ai_gen_id }}');
        const emptyState = this.querySelector('#ai-recently-viewed-empty-{{ ai_gen_id }}');

        if (products.length === 0) {
          this.showEmptyState();
          return;
        }

        grid.innerHTML = products.map(product => this.createProductHTML(product)).join('');
        grid.style.display = 'grid';
        emptyState.style.display = 'none';
      }

      createProductHTML(product) {
        const image = product.featured_image;
        const price = this.formatMoney(product.price);
        
        return `
          <a href="/products/${product.handle}" class="ai-recently-viewed__product-{{ ai_gen_id }}">
            <div class="ai-recently-viewed__image-container-{{ ai_gen_id }}">
              ${image ?
                `<img 
                  src="${image}" 
                  alt="${this.escapeHtml(product.title)}" 
                  class="ai-recently-viewed__image-{{ ai_gen_id }}"
                  loading="lazy"
                  width="300"
                  height="300"
                >` : 
                `<div class="ai-recently-viewed__image-placeholder-{{ ai_gen_id }}">
                  ${'product-apparel-1' | placeholder_svg_tag}
                </div>`
              }
            </div>
            <div class="ai-recently-viewed__product-info-{{ ai_gen_id }}">
              <h3 class="ai-recently-viewed__product-title-{{ ai_gen_id }}">${this.escapeHtml(product.title)}</h3>
              <p class="ai-recently-viewed__product-price-{{ ai_gen_id }}">${price}</p>
            </div>
          </a>
        `;
      }

      showEmptyState() {
        const grid = this.querySelector('#ai-recently-viewed-grid-{{ ai_gen_id }}');
        const emptyState = this.querySelector('#ai-recently-viewed-empty-{{ ai_gen_id }}');
        
        grid.style.display = 'none';
        emptyState.style.display = 'block';
      }

      formatMoney(cents) {
        const amount = cents / 100;
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD'
        }).format(amount);
      }

      escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
      }
    }

    customElements.define('recently-viewed-products-{{ ai_gen_id }}', RecentlyViewedProducts{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Recently viewed products",
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Recently viewed"
    },
    {
      "type": "text",
      "id": "empty_message",
      "label": "Empty state message",
      "default": "No recently viewed products"
    },
    {
      "type": "range",
      "id": "max_products",
      "min": 2,
      "max": 8,
      "step": 1,
      "label": "Maximum products to show",
      "default": 4
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "Text alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "left"
    },
    {
      "type": "select",
      "id": "product_text_alignment",
      "label": "Product text alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        }
      ],
      "default": "left"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "label": "Columns on mobile",
      "options": [
        {
          "value": "1",
          "label": "1"
        },
        {
          "value": "2",
          "label": "2"
        }
      ],
      "default": "2"
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Section padding",
      "default": 40
    },
    {
      "type": "range",
      "id": "content_spacing",
      "min": 8,
      "max": 48,
      "step": 4,
      "unit": "px",
      "label": "Content spacing",
      "default": 24
    },
    {
      "type": "range",
      "id": "grid_gap",
      "min": 8,
      "max": 40,
      "step": 4,
      "unit": "px",
      "label": "Grid gap",
      "default": 20
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 16,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 28
    },
    {
      "type": "range",
      "id": "product_title_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Product title size",
      "default": 16
    },
    {
      "type": "range",
      "id": "product_price_size",
      "min": 12,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Product price size",
      "default": 14
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "product_title_color",
      "label": "Product title color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "product_price_color",
      "label": "Product price color",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "empty_text_color",
      "label": "Empty state text color",
      "default": "#999999"
    },
    {
      "type": "header",
      "content": "Card style"
    },
    {
      "type": "color",
      "id": "card_background",
      "label": "Card background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "card_border_color",
      "label": "Card border color",
      "default": "#e6e6e6"
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Card border radius",
      "default": 8
    },
    {
      "type": "range",
      "id": "card_padding",
      "min": 8,
      "max": 32,
      "step": 4,
      "unit": "px",
      "label": "Card padding",
      "default": 16
    },
    {
      "type": "range",
      "id": "image_border_radius",
      "min": 0,
      "max": 16,
      "step": 2,
      "unit": "px",
      "label": "Image border radius",
      "default": 4
    }
  ],
  "presets": [
    {
      "name": "Recently viewed products"
    }
  ]
}
{% endschema %}